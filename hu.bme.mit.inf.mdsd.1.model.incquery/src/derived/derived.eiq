package derived

import "http://model/1.0"

@QueryBasedFeature
pattern goals(team : Team, event : Event) {
	Event.type(event, ::Goal);
	Event.committer(event, committer);
	Team.members(team, committer);
}

private pattern goalsHT(team : Team, event : Event) {
	Event.type(event, ::Goal);
	Event.committer(event, committer);
	Event.time(event, time);
	Team.members(team, committer);
	
	check(time < 1200);
}

@QueryBasedFeature
pattern cards(team : Team, event : Event) {
	Match.events(match, event);
	Match.Home(match, team);
	Event.type(event, ::RedCard);
} or {
	Match.events(match, event);
	Match.Home(match, team);
	Event.type(event, ::RedCardWithBan);	
} or {
	Match.events(match, event);
	Match.Home(match, team);
	Event.type(event, ::YellowCard);	
} or {
	Match.events(match, event);
	Match.Visitor(match, team);
	Event.type(event, ::RedCard);
} or {
	Match.events(match, event);
	Match.Visitor(match, team);
	Event.type(event, ::RedCardWithBan);	
} or {
	Match.events(match, event);
	Match.Visitor(match, team);
	Event.type(event, ::YellowCard);	
}

@QueryBasedFeature
pattern redBans(team : Team, event : Event) {
	Team.match(team, match);
	Match.events(match, event);
	Event.type(event, ::RedCardWithBan);
} or {
	Team.match(team, match);
	Match.events(match, event);
	Event.type(event, ::RedCardWithBan);	
}

@QueryBasedFeature
pattern goalCount(team : Team, target) {
	target == count find goals(team, _);
}

@QueryBasedFeature
pattern goalCountHT(team : Team, target) {
	target == count find goalsHT(team, _);
}

@QueryBasedFeature
pattern isSentOff(teamMember : TeamMember, target) {
	find redCardsOfPlayer(teamMember, _);
	target == true;
} or {
	neg find redCardsOfPlayer(teamMember, _);
	target == false;	
}

private pattern redCardsOfPlayer(teamMember : TeamMember, event : Event) {
	Event.committer(event, teamMember);
	Event.type(event, ::RedCard);
} or {
	Event.committer(event, teamMember);
	Event.type(event, ::RedCardWithBan);
}	

@QueryBasedFeature
pattern hasYellowCard(teamMember : TeamMember, target) {
	find yellowCardsOfPlayer(teamMember, _);
	target == true;
} or {
	neg find yellowCardsOfPlayer(teamMember, _);
	target == false;	
}

private pattern yellowCardsOfPlayer(teamMember : TeamMember, event : Event) {
	Event.committer(event, teamMember);
	Event.type(event, ::YellowCard);
}

@QueryBasedFeature
pattern match(team : Team, match : Match) {
	Match.Home(match, team);
} or {
	Match.Visitor(match, team);
}

@QueryBasedFeature
pattern team(teamMember : TeamMember, team : Team) {
	Team.members(team, teamMember);
}

@QueryBasedFeature
pattern teamMember(role : Role, teamMember : TeamMember) {
	TeamMember.playerRole(teamMember, role);
} or {
	TeamMember.staffRole(teamMember, role);
}

@QueryBasedFeature
pattern name(role : Role, name) {
	TeamMember.playerRole(teamMember, role);
	TeamMember.name(teamMember, name);
} or {
	TeamMember.staffRole(teamMember, role);
	TeamMember.name(teamMember, name);
}

@QueryBasedFeature
pattern staff(team : Team, staffMember : StaffMember) {
	Team.members(team, tm);
	StaffMember.teamMember(staffMember, tm);
}

@QueryBasedFeature
pattern substitutes(team : Team, player : Player) {
	Team.members(team, tm);
	Player.teamMember(player, tm);
	neg find inStartingLine(team, player);
}

private pattern inStartingLine(team : Team, player : Player) {
	Team.startingLine(team, player);
}
